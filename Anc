from flask import Flask, request, send_file, after_this_request
from flask_cors import CORS
import subprocess
import os
import time
import threading

app = Flask(__name__)
CORS(app)

# Bi·∫øn to√†n c·ª•c ƒë·ªÉ ki·ªÉm so√°t QR
qr_state = {
    "is_running": False,
    "qr_path": os.path.join("static", "qr_code_detected.png"),
    "full_path": os.path.join("static", "full_page.png"),
    "timestamp": 0
}

lock = threading.Lock()  # ƒë·∫£m b·∫£o tr√°nh race condition

@app.route("/run-bot", methods=["POST"])
def run_bot():
    with lock:
        price = request.form.get("price", "no-price")
        now = time.time()

        # N·∫øu c√≥ QR h·ª£p l·ªá trong 2 ph√∫t ‚Üí tr·∫£ l·∫°i lu√¥n
        if os.path.exists(qr_state["qr_path"]) and now - qr_state["timestamp"] < 120:
            print("üîÅ Tr·∫£ l·∫°i QR ƒë√£ t·∫°o trong v√≤ng 2 ph√∫t")
            return send_file(qr_state["qr_path"], mimetype="image/png")

        # N·∫øu bot ƒëang ch·∫°y ‚Üí ch·ªù ƒë·∫øn khi xong r·ªìi tr·∫£ QR
        if qr_state["is_running"]:
            print("‚åõ Bot ƒëang ch·∫°y. Ch·ªù ho√†n t·∫•t...")
            while qr_state["is_running"]:
                time.sleep(1)
            if os.path.exists(qr_state["qr_path"]):
                return send_file(qr_state["qr_path"], mimetype="image/png")
            else:
                return "Bot ch·∫°y xong nh∆∞ng kh√¥ng t√¨m th·∫•y QR", 500

        # N·∫øu kh√¥ng c√≥ QR ho·∫∑c ƒë√£ qu√° h·∫°n ‚Üí ch·∫°y bot m·ªõi
        print(f"üí∞ G·ªçi bot m·ªõi v·ªõi gi√°: {price}")
        qr_state["is_running"] = True

    # G·ªçi bot b√™n ngo√†i lock ƒë·ªÉ kh√¥ng gi·ªØ h√†ng ƒë·ª£i
    result = subprocess.run(["python3", "bot.py", price], capture_output=True, text=True)
    print(result.stdout)
    print(result.stderr)

    # C·∫≠p nh·∫≠t tr·∫°ng th√°i
    with lock:
        qr_state["timestamp"] = time.time()
        qr_state["is_running"] = False

        if os.path.exists(qr_state["qr_path"]):
            @after_this_request
            def cleanup(response):
                # ƒê·ª£i ng∆∞·ªùi d√πng kh√°c nh·∫≠n xong trong 2 ph√∫t th√¨ m·ªõi x√≥a
                threading.Thread(target=delayed_delete, args=(qr_state["qr_path"], qr_state["full_path"])).start()
                return response

            return send_file(qr_state["qr_path"], mimetype="image/png")
        else:
            return "Kh√¥ng t√¨m th·∫•y ·∫£nh QR ƒë√£ c·∫Øt!", 500

def delayed_delete(path1, path2):
    time.sleep(130)  # ƒê·ª£i 2 ph√∫t 10 gi√¢y r·ªìi m·ªõi xo√°
    for path in [path1, path2]:
        try:
            if os.path.exists(path):
                os.remove(path)
                print(f"üóëÔ∏è ƒê√£ x√≥a ·∫£nh sau 2 ph√∫t: {path}")
        except Exception as e:
            print(f"‚ùå L·ªói khi x√≥a ·∫£nh {path}: {e}")

if __name__ == "__main__":
    app.run(host="0.0.0.0", port=8080)
